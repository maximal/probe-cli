diff --git a/src/app/main/main.c b/src/app/main/main.c
index 838e129d04..3aa1b334fa 100644
--- a/src/app/main/main.c
+++ b/src/app/main/main.c
@@ -92,6 +92,8 @@
 #include <unistd.h>
 #endif
 
+#include <stdio.h>
+
 #ifdef HAVE_SYSTEMD
 #   if defined(__COVERITY__) && !defined(__INCLUDE_LEVEL__)
 /* Systemd's use of gcc's __INCLUDE_LEVEL__ extension macro appears to confuse
@@ -1284,8 +1286,16 @@ pubsub_install(void)
 {
     pubsub_builder_t *builder = pubsub_builder_new();
     int r = subsystems_add_pubsub(builder);
+    if (r != 0) {
+        fprintf(stderr, "SBSDEBUG: subsystems_add_pubsub failed: %d\n", r);
+        /* FALLTHROUGH */
+    }
     tor_assert(r == 0);
     r = tor_mainloop_connect_pubsub(builder); // consumes builder
+    if (r != 0) {
+        fprintf(stderr, "SBSDEBUG: tor_mainloop_connect_pubsub failed: %d\n", r);
+        /* FALLTHROUGH */
+    }
     tor_assert(r == 0);
 }
 
diff --git a/src/core/mainloop/mainloop_pubsub.c b/src/core/mainloop/mainloop_pubsub.c
index 1e72ada5f0..72dd348a2e 100644
--- a/src/core/mainloop/mainloop_pubsub.c
+++ b/src/core/mainloop/mainloop_pubsub.c
@@ -26,6 +26,8 @@
 #include "lib/pubsub/pubsub.h"
 #include "lib/pubsub/pubsub_build.h"
 
+#include <stdio.h>
+
 /**
  * Dispatcher to use for delivering messages.
  **/
@@ -63,8 +65,10 @@ tor_mainloop_connect_pubsub(struct pubsub_builder_t *builder)
   tor_mainloop_disconnect_pubsub();
 
   the_dispatcher = pubsub_builder_finalize(builder, &the_pubsub_items);
-  if (! the_dispatcher)
+  if (! the_dispatcher) {
+    fprintf(stderr, "SBSDEBUG: the_distpatcher is NULL\n");
     goto err;
+  }
 
   rv = 0;
   goto done;
diff --git a/src/lib/pubsub/pubsub_build.c b/src/lib/pubsub/pubsub_build.c
index 30b9194062..6a554c06bd 100644
--- a/src/lib/pubsub/pubsub_build.c
+++ b/src/lib/pubsub/pubsub_build.c
@@ -25,7 +25,8 @@
 #include "lib/log/util_bug.h"
 #include "lib/malloc/malloc.h"
 
- #include <string.h>
+#include <string.h>
+#include <stdio.h>
 
 /** Construct and return a new empty pubsub_items_t. */
 static pubsub_items_t *
@@ -281,19 +282,24 @@ pubsub_builder_finalize(pubsub_builder_t *builder,
   dispatch_t *dispatcher = NULL;
   tor_assert_nonfatal(builder->n_connectors == 0);
 
-  if (pubsub_builder_check(builder) < 0)
+  if (pubsub_builder_check(builder) < 0) {
+    fprintf(stderr, "SBSDEBUG: pubsub_builder_check failed\n");
     goto err;
+  }
 
   if (builder->n_errors) {
     log_warn(LD_GENERAL, "At least one error occurred previously when "
              "configuring the dispatcher.");
+    fprintf(stderr, "SBSDEBUG: builder->n_errors is not zero\n");
     goto err;
   }
 
   dispatcher = dispatch_new(builder->cfg);
 
-  if (!dispatcher)
+  if (!dispatcher) {
+    fprintf(stderr, "SBSDEBUG: dispatcher_new failed\n");
     goto err;
+  }
 
   pubsub_items_install_bindings(builder->items, dispatcher);
   if (items_out) {
diff --git a/src/lib/pubsub/pubsub_check.c b/src/lib/pubsub/pubsub_check.c
index 99e604d715..a9ae957551 100644
--- a/src/lib/pubsub/pubsub_check.c
+++ b/src/lib/pubsub/pubsub_check.c
@@ -25,6 +25,7 @@
 #include "lib/malloc/malloc.h"
 #include "lib/string/compat_string.h"
 
+#include <stdio.h>
 #include <string.h>
 
 static void pubsub_adjmap_add(pubsub_adjmap_t *map,
@@ -343,21 +344,27 @@ lint_message(const pubsub_adjmap_t *map, message_id_t msg)
     log_warn(LD_MESG|LD_BUG,
              "Message \"%s\" has subscribers, but no publishers.",
              get_message_id_name(msg));
+    fprintf(stderr, "SBSDEBUG: n_pub == 0\n");
     ok = false;
   } else if (n_sub == 0) {
     log_warn(LD_MESG|LD_BUG,
              "Message \"%s\" has publishers, but no subscribers.",
              get_message_id_name(msg));
+    fprintf(stderr, "SBSDEBUG: n_sub == 0\n");
     ok = false;
   }
 
   /* Check the message graph topology. */
-  if (lint_message_graph(map, msg, pub, sub) < 0)
+  if (lint_message_graph(map, msg, pub, sub) < 0) {
+    fprintf(stderr, "SBSDEBUG: lint_message_graph failed\n");
     ok = false;
+  }
 
   /* Check whether the messages have the same fields set on them. */
-  if (lint_message_consistency(msg, pub, sub) < 0)
+  if (lint_message_consistency(msg, pub, sub) < 0) {
+    fprintf(stderr, "SBSDEBUG: lint_message_consistency failed\n");
     ok = false;
+  }
 
   if (!ok) {
     /* There was a problem -- let's log all the publishers and subscribers on
@@ -385,6 +392,7 @@ pubsub_adjmap_check(const pubsub_adjmap_t *map)
   bool all_ok = true;
   for (unsigned i = 0; i < map->n_msgs; ++i) {
     if (lint_message(map, i) < 0) {
+      fprintf(stderr, "lint_message failed for %u\n", i);
       all_ok = false;
     }
   }
@@ -401,11 +409,15 @@ pubsub_builder_check(pubsub_builder_t *builder)
   pubsub_adjmap_t *map = pubsub_build_adjacency_map(builder->items);
   int rv = -1;
 
-  if (!map)
+  if (!map) {
+    fprintf(stderr, "SBSDEBUG: pubsub_build_adjacency_map failed\n");
     goto err; // should be impossible
+  }
 
-  if (pubsub_adjmap_check(map) < 0)
+  if (pubsub_adjmap_check(map) < 0) {
+    fprintf(stderr, "SBSDEBUG: pubsub_adjmap_check failed\n");
     goto err;
+  }
 
   rv = 0;
  err:
